@model Questioning.Models.ResultViewModel

@{
    ViewBag.Title = "Результат";
}
@section scripts
{
    @Scripts.Render("~/bundles/result")
<script>
    initChart("nvChart", "Початківець", ["1", "2", "3", "4"],
        [@(String.Join(", ",
            Model.QuestioningData.Rank["Початківець"].Questions.
            Select(q => q.AnswerMark)))], 
        ["rgba(0, 200, 83, 0.4)",
            "rgba(0, 200, 83, 0.4)",
            "rgba(0, 200, 83, 0.4)",
            "rgba(0, 200, 83, 0.4)"]);
    initChart("advChart", "Твердий початківець", ["5", "6", "7"],
        [@(String.Join(", ",
            Model.QuestioningData.Rank["Твердий початківець"].Questions.
            Select(q => q.AnswerMark)))],
        ["rgba(104, 159, 56, 0.4)",
            "rgba(104, 159, 56, 0.4)",
            "rgba(104, 159, 56, 0.4)"]);
    initChart("comChart", "Компетентний", ["8", "9", "10"],
        [@(String.Join(", ",
            Model.QuestioningData.Rank["Компетентний"].Questions.
            Select(q => q.AnswerMark)))],
        ["rgba(0, 121, 107, 0.4)",
            "rgba(0, 121, 107, 0.4)",
            "rgba(0, 121, 107, 0.4)"]);
    initChart("proChart", "Досвідчений", ["11", "12", "13"],
        [@(String.Join(", ",
            Model.QuestioningData.Rank["Досвідчений"].Questions.
            Select(q => q.AnswerMark)))],
        ["rgba(48, 63, 159, 0.4)",
            "rgba(48, 63, 159, 0.4)",
            "rgba(48, 63, 159, 0.4)"]);
    initChart("expChart", "Експерт", ["14", "15", "16"],
        [@(String.Join(", ",
            Model.QuestioningData.Rank["Експерт"].Questions.
            Select(q => q.AnswerMark)))],
        ["rgba(81, 45, 168, 0.4)",
            "rgba(81, 45, 168, 0.4)",
            "rgba(81, 45, 168, 0.4)"]);
    initChartCompare("compareChart", "Результат",
        ["Початківець", "Твердий початківець", "Компетентний", "Досвідчений","Експерт"],
        [@(String.Join(", ",
            Model.QuestioningData.Rank.Select(r => r.Value.Total / (double)(r.Value.Questions.Count() * 5) * 100)))],
        ["rgba(0, 200, 83, 0.4)",
            "rgba(104, 159, 56, 0.4)",
            "rgba(0, 121, 107, 0.4)",
            "rgba(48, 63, 159, 0.4)",
            "rgba(81, 45, 168, 0.4)"]);
</script>
}
<h2>@ViewBag.Title</h2>

<p class="text-success">@ViewBag.StatusMessage</p>
<div>
    <h3>
        Ви @(Model.QuestioningData.Result).
    </h3>

    @if (Model.QuestioningData.Result.Contains("експерт"))
    {
    <p>
        Експерти – основне джерело знань та інформації в будь-якій сфері. 
        Вони безперестану шукають все кращі і кращі методи роботи. 
        Вони завжди застосовують весь свій велетенський багаж знань у правильному контексті. 
        Вони пишуть книжки, статті та проводять семінари. Це сучасні чаклуни. 
        Експерти керуються інтуїцією. 
        Доктор Хаус, який з одного погляду на пацієнта (або взагалі його медичну картку)
        міг поставити діагноз – типовий приклад експерта. 
        Експерти працюють за допомогою несвідомого “порівняння з взірцем” (“pattern matching”) 
        у базі свого досвіду. От тільки проблема в тому, що функція “порівняння з взірцем” 
        асинхронна і знаходиться в частині мозку, яка не підконтрольна свідомості.
    </p>
    }
    else if (Model.QuestioningData.Result.Contains("досвідчений"))
    {
    <p>
        Досвідченим необхідна “повна картина” проблемної області, 
        адже вони хочуть розуміти весь концепт. Вони роблять значний прорив
        в рамках моделі братів Дрейфус, адже постійно оцінюють виконану роботу 
        і переглядають свої підходи, аби наступного разу бути ще ефективнішими.
        Вони також можуть навчатись використовуючи чужий досвід. 
        І найголовніше – вони завжди беруть до уваги контекст задачі. 
        Якщо повернутись до програмування, то чудовий приклад ілюстрації – це 
        використання патернів проектування. Лише досвідчені використовують їх виключно там де треба,
        а не бездумно і повсюдно, бо це круто і модно.
    </p>
    }
    else if (Model.QuestioningData.Result.Contains("компетентний"))
    {
    <p>
        Компетентні будують правильні моделі проблемної області та ефективно нею користуються. 
        Здатні усувати проблеми з якими раніше не стикались. Про людей на цьому рівні часто кажуть, 
        що вони “мають ініціативу”. Вони можуть вчити новачків і не задовбують експертів.
        Щоправда їм ще бракує досвіду аби вдало розставити пріоритети при рішенні задач.
        Власне кажучи, саме з цього рівня людину можна вже назвати інженером – компетентні вирішують
        задачі, а не працюють за алгоритмом.
    </p>
    }
    else if (Model.QuestioningData.Result.Contains("твердий початківець"))
    {
    <p>
        Тверді початківці починають вже потроху відступати від фіксованих правил. 
        Вони можуть спробувати якісь задачі самостійно, але у них все ще є труднощі 
        із усуненням проблем, які виникають. Початківці можуть скористатись порадами 
        в правильному контексті, врахувавши свій досвід подібних ситуацій, але ледь-ледь.
        І хоч вони вже починають формулювати якісь загальні принципи, вони все ще не бачать
        “всієї картини”. Якщо спробувати надати їм ширший контекст – вони відмахнуться від нього
        як від недоречного.
    </p>
    }
    else if (Model.QuestioningData.Result.Contains("початківець"))
    {
    <p>
        Новачки дуже переживають за свою успішність; 
        їх досвіду замало, щоб повести їх у правильному напрямку і вони не знають 
        чи їх вчинки будуть правильними. Новачки зазвичай не хочуть вчитися,
        зате хочуть досягти миттєвого результату. Вони не знають як реагувати на помилки 
        і тому легко збиваються з пантелику, коли щось іде “не так”. Зате вони можуть 
        бути досить ефективними, коли їм дати набір контекстно незалежних правил у формі
        “у випадку ХХХ, роби УУУ”. Іншими словами їм необхідний рецепт або алгоритм.
    </p>
    }
    <hr />
    @foreach (var r in Model.QuestioningData.Rank)
    {
        var num = r.Value.Total % 10;
        string scoreText;
        if (r.Value.Total % 100 > 4 && r.Value.Total % 100 < 20)
        { scoreText = "балів"; }
        else if (num == 1)
        { scoreText = "бал"; }
        else if (num > 1 && num < 5)
        { scoreText = "бали"; }
        else
        { scoreText = "балів"; }
        var numSum = (r.Value.Questions.Count() * 5) % 10;
        string scoreTextSum;
        if ((r.Value.Questions.Count() * 5) % 100 > 4 && (r.Value.Questions.Count() * 5) % 100 < 20)
        { scoreTextSum = "балів"; }
        else if (numSum == 1)
        { scoreTextSum = "бал"; }
        else if (numSum > 1 && numSum < 5)
        { scoreTextSum = "бали"; }
        else
        { scoreTextSum = "балів"; }
        <p>
            <b>@r.Key</b> - @r.Value.Total @scoreText / @(r.Value.Questions.Count() * 5) @scoreTextSum
            &emsp;(@((r.Value.Total / (double)(r.Value.Questions.Count() * 5) * 100).ToString("N2"))%)
        </p>
    }
    <hr />
    <div class="col-xl-12">
        <span class="thumbnail">
            <canvas id="compareChart"></canvas>
        </span>
    </div>
    <hr />
    <h3>Набрані бали</h3>
    <div class="row">
        <div class="col-xs-12 col-sm-6">
            <span class="thumbnail">
                <canvas id="nvChart"></canvas>
            </span>
        </div>
        <div class="col-xs-12 col-sm-6">
            <span class="thumbnail">
                <canvas id="advChart"></canvas>
            </span>
        </div>
        <div class="col-xs-12 col-sm-6">
            <span class="thumbnail">
                <canvas id="comChart"></canvas>
            </span>
        </div>
        <div class="col-xs-12 col-sm-6">
            <span class="thumbnail">
                <canvas id="proChart"></canvas>
            </span>
        </div>
        <div class="col-xs-12 col-sm-6">
            <span class="thumbnail">
                <canvas id="expChart"></canvas>
            </span>
        </div>
    </div>
    <hr />
</div>